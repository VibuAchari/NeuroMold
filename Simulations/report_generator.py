import os
import subprocess
import datetime
import numpy as np
import matplotlib.pyplot as plt

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
RESULTS_DIR = os.path.join(BASE_DIR, "results")
CHARTS_DIR = os.path.join(BASE_DIR, "visualizations", "output_charts")
REPORT_MD = os.path.join(BASE_DIR, "NeuroMold_Report.md")
REPORT_HTML = os.path.join(BASE_DIR, "NeuroMold_Report.html")
REPORT_PDF = os.path.join(BASE_DIR, "NeuroMold_Report.pdf")

def load_result(filename):
    path = os.path.join(RESULTS_DIR, filename)
    if os.path.exists(path):
        return np.load(path, allow_pickle=True)
    return None

def generate_markdown():
    accuracy = load_result("response_accuracy.npy")
    spike_counts = load_result("spike_counts.npy")
    mem_potentials = load_result("membrane_potential.npy")

    avg_spikes = np.mean(spike_counts) if spike_counts is not None else "N/A"
    accuracy_val = f"{accuracy[0]:.4f}" if accuracy is not None else "N/A"

    content = f"""# NeuroMold Project Report

**Date:** {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}

## Overview

NeuroMold is a neuromorphic automation system for the injection molding industry, using Spiking Neural Networks (SNNs) to optimize process control and defect reduction.

---

## Metrics Summary

- âœ… **SNN Response Accuracy:** {accuracy_val}
- ðŸ”‹ **Average Spikes per Timestep:** {avg_spikes}

---

## Visualizations

### Spike Rates  
![Spike Rates](visualizations/output_charts/spike_rates.png)

### Control Signals from SNN  
![SNN Control Signals](visualizations/output_charts/snn_control_signals.png)

### Membrane Potentials (sample)  
![Membrane Potential](visualizations/output_charts/membrane_potential.png)

### Controller Comparison  
![Controller Comparison](visualizations/output_charts/controller_comparison.png)

---

## Energy Estimation

Energy consumption is estimated based on total spike activity:

- Spike count-based energy model:  
  _E = Total Spikes Ã— 0.25 ÂµJ_

  (Simulation-based estimate)

---

## Conclusion

SNN-based control shows promising accuracy and efficiency for real-time control in injection molding. Future steps include:

- Integrating real-world sensor data
- Hardware deployment using neuromorphic chips
- Expanding to multimodal defect detection

---

*Generated by NeuroMold automation pipeline*
"""
    with open(REPORT_MD, "w", encoding="utf-8") as f:
        f.write(content)
    print(f"[âœ“] Markdown report saved: {REPORT_MD}")
    return REPORT_MD

def convert_md_to_html(md_path, html_path):
    pandoc_path = r"C:\Program Files\Pandoc\pandoc.exe"  # Full path to pandoc
    try:
        subprocess.run([pandoc_path, md_path, "-f", "markdown", "-t", "html", "-s", "-o", html_path], check=True)
        print(f"[âœ“] HTML report saved: {html_path}")
    except subprocess.CalledProcessError as e:
        print(f"[!] Pandoc HTML generation failed: {e}")

def convert_html_to_pdf(html_path, pdf_path):
    wkhtmltopdf_path = r"C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe"
    try:
        subprocess.run([
            wkhtmltopdf_path,
            "--enable-local-file-access",
            html_path,
            pdf_path
        ], check=True)
        print(f"[âœ“] PDF report saved: {pdf_path}")
    except Exception as e:
        print(f"[!] wkhtmltopdf failed: {e}")

if __name__ == "__main__":
    md_path = generate_markdown()
    convert_md_to_html(md_path, REPORT_HTML)
    convert_html_to_pdf(REPORT_HTML, REPORT_PDF)
